x<-20
x<-1:20
y<-c(True, False)
y<-c(TRUE, FALSE)
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c(2, TRUE)
m <- matrix(nrow = 2, ncol = 3)
m
m
m
dim(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
x<-list(1, "a", TRUE, 1+4i)
x
x[1]
x[2]
x <- 4
class(x)
x <- c(4, "a", TRUE)
list(x)
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
d<-x[[1]]
class(d)
D
d
class(d)
d[1]
x <- 1:4
y <- 2:3
x+y
x
y
x+y
dd=x+y
class(dd)
rr <- c(3, 5, 1, 10, 12, 6)
x[x<6]==0
x <- c(3, 5, 1, 10, 12, 6)
x[x == 6] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x == 6] <- 0
x
x[x<6]<-0
x
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10))
?rnorm
rnorm(1)
rnorm(10)
rnorm(10, mean=10)
rnorm(10, mean=10, sd=10)
?list
x <- list(a = 1:5, b = rnorm(10))
x
acf(1h)
www<-"http://library.quantlego.com/Howto/R/wave.dat"
wave.dat<-read.table(www,header=T)
aSeq <- sin(seq(0.1*pi, 10*pi, 0.1*pi))
err <- rnorm(length(aSeq),0, 0.1)&nbsp; #note: length(aSeq)=100
err <- rnorm(length(aSeq),0, 0.1); #note: length(aSeq)=100
new_data <- aSeq + err
par(mfrow=c(1,2))
plot(new_data)
plot(new_data, type="l", col="3")
monthlyTS<- ts(new_data, freq = 12, start=c(2001,1))
plot(monthlyTS, xlim = c(2001, 2009))
monthlyTS
weeklyTS<- ts(new_data, freq = 52, start=c(2001,1))
plot(weeklyTS, xlim = c(2001, 2003))
acf(monthlyTS, lag.max=10, plot = TRUE)
plot(acf(monthlyTS, lag.max=10, plot = TRUE))
acf(monthlyTS, lag.max=10, plot = TRUE)
plot(acf(monthlyTS, lag.max=10, plot = TRUE))
plot(acf(monthlyTS, lag.max=10, plot = TRUE))
plot(acf(monthlyTS, lag.max=10, plot = TRUE))
par(mfrow=c(1,1))
plot(acf(monthlyTS, lag.max=10, plot = TRUE))
acfSeries = acf(monthlyTS, lag.max=10, plot = TRUE)
>acf
?acf
acfSeries = acf(monthlyTS, plot = TRUE)
len(acfSeries)
length(acfSeries)
length(monthlyTS)
acfSeries
length(acfSeries)
aSeq <- sin(seq(0.1*pi, 10*pi, 0.1*pi))
err <- rnorm(length(aSeq),0, 0.1); #note: length(aSeq)=100
new_data <- aSeq + err
par(mfrow=c(1,2))
plot(new_data, type="l", col="3")
monthlyTS<- ts(new_data, freq = 12, start=c(2001,1))
plot(monthlyTS, xlim = c(2001, 2009))
weeklyTS<- ts(new_data, freq = 52, start=c(2001,1))
plot(weeklyTS, xlim = c(2001, 2003))
acfSeries = acf(monthlyTS, plot = TRUE)
length(acfSeries)
seq(1,100,1)
seq(1,100,3)
seq(1,100,1)
?seq
rep(10,10)
plot(new_data)
?plot
plot(new_data, type='l')
acf(new_data)
len(new_data)
length(new_data)
nS = length(new_data)
c(acf(new_data), rep(0,10))
c(1,1)
acf(new_data)
acfunc <- acf(new_data)
c(1,1)
acfunc <- list(acf(new_data),1)
acfunc <- list(acf(new_data),1, nrow=1)
acfunc1 <- list(acf(new_data),1, nrow=1)
acfunc1 <- list(acf(new_data),1, nrow=1)
aSeq <- sin(seq(0.1*pi, 10*pi, 0.1*pi))
err <- rnorm(length(aSeq),0, 0.1); #note: length(aSeq)=100
new_data <- aSeq + err
nS = length(new_data)
acfunc <- acf(new_data)
?append
list(afunc,afunc)
list(acfunc,acfunc)
library('forecast')
library('tseries')
install.packages("forecast")
library('tseries')
library('forecast')
daily_data = read.csv('day.csv', header=TRUE, stringsAsFactors=FALSE)
daily_data = read.csv('E:\enea\R\day.csv', header=TRUE, stringsAsFactors=FALSE)
daily_data = read.csv('E:\\enea\\R\\day.csv', header=TRUE, stringsAsFactors=FALSE)
daily_data$Date = as.Date(daily_data$dteday)
ggplot(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") +
xlab("")
library('ggplot2')
install.packages("ggplot2")
ggplot(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") + xlab("")
ggplot2(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") + xlab("")
library('forecast')
library('tseries')
library('ggplot2')
daily_data = read.csv('E:\\enea\\R\\day.csv', header=TRUE, stringsAsFactors=FALSE)
daily_data$Date = as.Date(daily_data$dteday)
ggplot2(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") + xlab("")
ggplot(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") + xlab("")
daily_data$cnt_ma = ma(daily_data$clean_cnt, order=7) # using the clean count with no outliers
daily_data$clean_cnt
count_ts = ts(daily_data[, c('cnt')])
daily_data$clean_cnt = tsclean(count_ts)
ggplot(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") + xlab("")
daily_data$cnt_ma = ma(daily_data$clean_cnt, order=7) # using the clean count with no outliers
daily_data$cnt_ma30 = ma(daily_data$clean_cnt, order=30)
ggplot() +
geom_line(data = daily_data, aes(x = Date, y = clean_cnt, colour = "Counts")) +
geom_line(data = daily_data, aes(x = Date, y = cnt_ma,   colour = "Weekly Moving Average"))  +
geom_line(data = daily_data, aes(x = Date, y = cnt_ma30, colour = "Monthly Moving Average"))  +
ylab('Bicycle Count')
count_ma = ts(na.omit(daily_data$cnt_ma), frequency=30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
adf.test(count_ma, alternative = "stationary")
auto.arima(deseasonal_cnt, seasonal=FALSE)
fit<-auto.arima(deseasonal_cnt, seasonal=FALSE)
tsdisplay(residuals(fit), lag.max=45, main='(1,1,1) Model Residuals')
fit2 = arima(deseasonal_cnt, order=c(1,1,7))
fcast <- forecast(fit2, h=30)
plot(fcast)
fcast <- forecast(fit2, h=60)
plot(fcast)
?forecast
library(keras)
install.packages("keras")
library(keras)
install_keras()
library(keras)
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
library(keras)
?dataset_mnist
library(zoo)
library(stringr)
debugSource('C:/Users/rbachorz/R/aaas/projects/engine-r/src/R/standard/forecastSVM.R')
library(futile.logger)
library(timeDate)
wdir="C:\\Users\\rbachorz\\R\\aaas\\projects\\engine-r\\src\\R\\standard"
setwd(wdir)
source("prepareData.R")
dfData <- readData("E:\\R\\EDM\\aaas\\projects\\engine-r\\src\\R\\standard\\Load_Temp_TimeSeries_PPL_Date_WorkingDay_Load_Temperature.csv")
dfData$dayOfWeek <- as.factor(dayOfWeek(timeDate(dfData$Date)))
dfData$hour <- as.factor(format(dfData$DateTime, "%H"))
dfData$month <- as.factor(format(dfData$DateTime, "%m"))
levels(dfData$dayOfWeek)
# prepare the data frame with parameterization
dfParameters <- data.frame(name = as.character(), value = as.character(), stringsAsFactors = FALSE)
colnames(dfParameters) <- c("name", "value")
##########
##########
# training
# train the model
# pathModelOut - location of the model file
# trainBeg - beginning of train period
# trainEnd - end of train period
# resolution - time resoluition when creating the sequence
dfParameters[1,] <- c("pathModelOut", paste(wdir, "\\rfModel.rds", sep = ""))
dfParameters[2,] <- c("trainBeg", as.character(format(min(dfData$Date), "%Y-%m-%dT%H:%M")))
dfParameters[3,] <- c("trainEnd", as.character(format(max(dfData$Date), "%Y-%m-%dT%H:%M")))
dfParameters[4,] <- c("resolution", "hour")
dfData$Date <- NULL
source("trainRF.R")
trainingResult <- run(dfData = dfData, dfParameters = dfParameters)
forecastBeg <- as.POSIXct("2015-03-01 00:00", tz = "GMT")
forecastEnd <- as.POSIXct("2015-03-08 00:00", tz = "GMT")
# prepare the data frame with parameterization
dfParameters <- data.frame(name = as.character(), value = as.character(), stringsAsFactors = FALSE)
colnames(dfParameters) <- c("name", "value")
dfParameters[1,] <- c("forecastBeg", as.character(format(forecastBeg, "%Y-%m-%dT%H:%M")))
dfParameters[2,] <- c("forecastEnd", as.character(format(forecastEnd, "%Y-%m-%dT%H:%M")))
dfParameters[3,] <- c("resolution", "hour")
dfParameters[4,] <- c("pathModelIn", paste(wdir, "\\rfModel.rds", sep = ""))
dfData <- readData(paste(wdir, "\\Load_Temp_TimeSeries_PPL_Date_WorkingDay_Load_Temperature.csv", sep = ""))
dfPredictors <- dfData %>% filter(Date > forecastBeg, Date <= forecastEnd) %>% select(Temperature, WorkingDay)
source("forecastSVM.R")
forecastResult <- run(dfData = dfPredictors, dfParameters = dfParameters)
debugSource('C:/Users/rbachorz/R/aaas/projects/engine-r/src/R/standard/forecastSVM.R')
source("forecastSVM.R")
forecastResult <- run(dfData = dfPredictors, dfParameters = dfParameters)
# forecasting
# train the model
forecastBeg <- as.POSIXct("2015-03-01 00:00", tz = "GMT")
forecastEnd <- as.POSIXct("2015-03-08 00:00", tz = "GMT")
# prepare the data frame with parameterization
dfParameters <- data.frame(name = as.character(), value = as.character(), stringsAsFactors = FALSE)
colnames(dfParameters) <- c("name", "value")
dfParameters[1,] <- c("forecastBeg", as.character(format(forecastBeg, "%Y-%m-%dT%H:%M")))
dfParameters[2,] <- c("forecastEnd", as.character(format(forecastEnd, "%Y-%m-%dT%H:%M")))
dfParameters[3,] <- c("resolution", "hour")
dfParameters[4,] <- c("pathModelIn", paste(wdir, "\\svmModel.rds", sep = ""))
dfData <- readData(paste(wdir, "\\Load_Temp_TimeSeries_PPL_Date_WorkingDay_Load_Temperature.csv", sep = ""))
dfPredictors <- dfData %>% filter(Date > forecastBeg, Date <= forecastEnd) %>% select(Temperature, WorkingDay)
source("forecastSVM.R")
forecastResult <- run(dfData = dfPredictors, dfParameters = dfParameters)
wdir="C:\\Users\\rbachorz\\R\\aaas\\projects\\engine-r\\src\\R\\standard"
setwd(wdir)
source("prepareData.R")
dfData <- readData("E:\\R\\EDM\\aaas\\projects\\engine-r\\src\\R\\standard\\Load_Temp_TimeSeries_PPL_Date_WorkingDay_Load_Temperature.csv")
dfData$dayOfWeek <- as.factor(dayOfWeek(timeDate(dfData$Date)))
dfData$hour <- as.factor(format(dfData$DateTime, "%H"))
dfData$month <- as.factor(format(dfData$DateTime, "%m"))
levels(dfData$dayOfWeek)
# prepare the data frame with parameterization
dfParameters <- data.frame(name = as.character(), value = as.character(), stringsAsFactors = FALSE)
colnames(dfParameters) <- c("name", "value")
##########
##########
# training
# train the model
# pathModelOut - location of the model file
# trainBeg - beginning of train period
# trainEnd - end of train period
# resolution - time resoluition when creating the sequence
dfParameters[1,] <- c("pathModelOut", paste(wdir, "\\svmModel.rds", sep = ""))
dfParameters[2,] <- c("trainBeg", as.character(format(min(dfData$Date), "%Y-%m-%dT%H:%M")))
dfParameters[3,] <- c("trainEnd", as.character(format(max(dfData$Date), "%Y-%m-%dT%H:%M")))
dfParameters[4,] <- c("resolution", "hour")
dfData$Date <- NULL
source("trainSVM.R")
trainingResult <- run(dfData = dfData, dfParameters = dfParameters)
forecastBeg <- as.POSIXct("2015-03-01 00:00", tz = "GMT")
forecastEnd <- as.POSIXct("2015-03-08 00:00", tz = "GMT")
# prepare the data frame with parameterization
dfParameters <- data.frame(name = as.character(), value = as.character(), stringsAsFactors = FALSE)
colnames(dfParameters) <- c("name", "value")
dfParameters[1,] <- c("forecastBeg", as.character(format(forecastBeg, "%Y-%m-%dT%H:%M")))
dfParameters[2,] <- c("forecastEnd", as.character(format(forecastEnd, "%Y-%m-%dT%H:%M")))
dfParameters[3,] <- c("resolution", "hour")
dfParameters[4,] <- c("pathModelIn", paste(wdir, "\\svmModel.rds", sep = ""))
dfData <- readData(paste(wdir, "\\Load_Temp_TimeSeries_PPL_Date_WorkingDay_Load_Temperature.csv", sep = ""))
dfPredictors <- dfData %>% filter(Date > forecastBeg, Date <= forecastEnd) %>% select(Temperature, WorkingDay)
source("forecastSVM.R")
forecastResult <- run(dfData = dfPredictors, dfParameters = dfParameters)
##########
##########
# comparison
forecastResult$referenceLoad <- dfData %>% filter(Date >= forecastBeg, Date < forecastEnd) %>% select(Load)
forecastResult$Date <- dfData %>% filter(Date >= forecastBeg, Date < forecastEnd) %>% select(Date)
colnames(forecastResult) <- c("Prediction", "Load", "Date")
forecastResult
